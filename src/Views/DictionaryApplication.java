/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import controllers.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;
import models.Word;
import org.bson.Document;
import org.bson.conversions.Bson;

import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.gte;
/**
 *
 * @author DHT
 */
public class DictionaryApplication extends javax.swing.JFrame {

    /**
     * Creates new form DictionaryApplication
     */
    DictionaryCommandLine DC = new DictionaryCommandLine();
    searchPanel formSearch;
    EditPanel formEdit;
    DefaultListModel dataListWord = new DefaultListModel<String>();
    DefaultTableModel table = new DefaultTableModel();
    int load;
    //khởi tạo mongoClient:
    MongoClientURI uri;
    MongoClient mongoClient;
    MongoDatabase database;
    MongoCollection<Document> collection;
    
    public DictionaryApplication(int load) {
        
        initComponents();
        
        //Load dữ liệu:
        this.load = load;
        if(this.load == 0)
        {
            try {
            DC.insertFromFile();
            } catch (IOException e) {
            }
           
        }
        else if(this.load == 1)
        {
            try
            {
                insertFromMongo();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane, "Lỗi kết nối đến databse");
                this.dispose();
            }
            
        }
         //DataListWord:
            DC.getListWord().forEach(i -> {
                dataListWord.addElement(i.getWordTarget());
            });
            //---------------
            table.addColumn("English");
            table.addColumn("Vietnamese");
            for(Word i : DC.getListWord()){
            table.addRow(new Object[]{i.getWordTarget(),i.getWordExplain()});
        }
            //----------------
            formSearch = new searchPanel(DC, dataListWord);  
            panelShow.add(formSearch);
            formSearch.setVisible(true);
        
        
            formEdit = new EditPanel(DC, dataListWord, this, table);
            panelShow.add(formEdit);
            formEdit.setVisible(false);
        
        
    }
    
    void insertFromMongo()
    {
            uri = new MongoClientURI(
            "mongodb+srv://dohuutoannb:toan123456@cluster0.i4joj.mongodb.net/<dbname>?retryWrites=true&w=majority");

            mongoClient = new MongoClient(uri);
            database = mongoClient.getDatabase("Dictionary");
            System.out.println("Connected");
            collection = database.getCollection("Dictionary");
            MongoCursor<Document> doc = collection.find().iterator();
            while(doc.hasNext())
            {
                ArrayList<Object> ob = new ArrayList(doc.next().values());
                Word w = new Word(ob.get(1).toString(), ob.get(2).toString());
                this.DC.add(w);
            }
    }
    void addToMongo(Word w)
    {
        Document d = new Document();
        d.append("target", w.getWordTarget());
        d.append("explain", w.getWordExplain());
        collection.insertOne(d);
    }
    void deleteToMongo(int index)
    {
        Bson filter = eq("target",DC.getListWord().get(index).getWordTarget());
        collection.findOneAndDelete(filter);
    }
    void replaceToMongo(Word newWord, int index)
    {
        Bson filter = eq("target", DC.getListWord().get(index).getWordTarget());
        Document d = new Document();
        d.append("target",newWord.getWordTarget());
        d.append("explain", newWord.getWordExplain());
        collection.replaceOne(filter, d);
        DC.repalace(index, newWord);
        table.setValueAt(newWord.getWordTarget(), index,0);
        table.setValueAt(newWord.getWordExplain(), index,1);
        dataListWord.set(index, newWord.getWordTarget());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSMTextFullBeanInfo1 = new rojeru_san.RSMTextFullBeanInfo();
        rSPanelGradiente1 = new rspanelgradiente.RSPanelGradiente();
        rSButtonIconI8 = new rojerusan.RSButtonIconI();
        btn_edit = new rojerusan.RSButtonIconI();
        btn_search = new rojerusan.RSButtonIconI();
        rSPanelGradiente2 = new rspanelgradiente.RSPanelGradiente();
        rSPanelImage2 = new rojerusan.RSPanelImage();
        panelShow = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Phần mềm từ điển - Đỗ Hữu Toàn Collab Lê Đình Thiệu");
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1205, 750));
        setMinimumSize(new java.awt.Dimension(1205, 750));
        getContentPane().setLayout(null);

        rSPanelGradiente1.setBackground(new java.awt.Color(48, 63, 159));
        rSPanelGradiente1.setColorPrimario(new java.awt.Color(42, 49, 64));
        rSPanelGradiente1.setColorSecundario(new java.awt.Color(42, 49, 64));

        rSButtonIconI8.setBackground(new java.awt.Color(42, 49, 64));
        rSButtonIconI8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/baseline_add_white_18dp.png"))); // NOI18N
        rSButtonIconI8.setColorHover(new java.awt.Color(57, 67, 87));
        rSButtonIconI8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rSButtonIconI8.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        rSButtonIconI8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonIconI8ActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(42, 49, 64));
        btn_edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/baseline_create_white_18dp.png"))); // NOI18N
        btn_edit.setColorHover(new java.awt.Color(80, 90, 110));
        btn_edit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn_edit.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_search.setBackground(new java.awt.Color(42, 49, 64));
        btn_search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/baseline_search_white_18dp.png"))); // NOI18N
        btn_search.setColorHover(new java.awt.Color(80, 90, 110));
        btn_search.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn_search.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btn_search.setSelected(true);
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rSPanelGradiente1Layout = new javax.swing.GroupLayout(rSPanelGradiente1);
        rSPanelGradiente1.setLayout(rSPanelGradiente1Layout);
        rSPanelGradiente1Layout.setHorizontalGroup(
            rSPanelGradiente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(rSButtonIconI8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(btn_search, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        rSPanelGradiente1Layout.setVerticalGroup(
            rSPanelGradiente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelGradiente1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(rSButtonIconI8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(512, Short.MAX_VALUE))
        );

        getContentPane().add(rSPanelGradiente1);
        rSPanelGradiente1.setBounds(0, 80, 60, 630);

        rSPanelGradiente2.setColorPrimario(new java.awt.Color(42, 49, 64));
        rSPanelGradiente2.setColorSecundario(new java.awt.Color(42, 49, 64));

        rSPanelImage2.setImagen(new javax.swing.ImageIcon(getClass().getResource("/image/logo.png"))); // NOI18N

        javax.swing.GroupLayout rSPanelImage2Layout = new javax.swing.GroupLayout(rSPanelImage2);
        rSPanelImage2.setLayout(rSPanelImage2Layout);
        rSPanelImage2Layout.setHorizontalGroup(
            rSPanelImage2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 75, Short.MAX_VALUE)
        );
        rSPanelImage2Layout.setVerticalGroup(
            rSPanelImage2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout rSPanelGradiente2Layout = new javax.swing.GroupLayout(rSPanelGradiente2);
        rSPanelGradiente2.setLayout(rSPanelGradiente2Layout);
        rSPanelGradiente2Layout.setHorizontalGroup(
            rSPanelGradiente2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelGradiente2Layout.createSequentialGroup()
                .addContainerGap(1088, Short.MAX_VALUE)
                .addComponent(rSPanelImage2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        rSPanelGradiente2Layout.setVerticalGroup(
            rSPanelGradiente2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelGradiente2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rSPanelImage2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(rSPanelGradiente2);
        rSPanelGradiente2.setBounds(0, 0, 1220, 86);

        panelShow.setMinimumSize(new java.awt.Dimension(1146, 610));
        panelShow.setPreferredSize(new java.awt.Dimension(1108, 592));

        javax.swing.GroupLayout panelShowLayout = new javax.swing.GroupLayout(panelShow);
        panelShow.setLayout(panelShowLayout);
        panelShowLayout.setHorizontalGroup(
            panelShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1146, Short.MAX_VALUE)
        );
        panelShowLayout.setVerticalGroup(
            panelShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );

        getContentPane().add(panelShow);
        panelShow.setBounds(80, 100, 1098, 570);

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void addNew(Word newWord){
        DC.add(newWord);
        table.addRow(new Object[]{newWord.getWordTarget(),newWord.getWordExplain()});
        dataListWord.addElement(newWord.getWordTarget());
        System.out.println("Đã add");
    }
    public void replace(Word replace, int index){
        DC.repalace(index, replace);
        table.setValueAt(replace.getWordTarget(), index,0);
        table.setValueAt(replace.getWordExplain(), index,1);
        dataListWord.set(index, replace.getWordTarget());
        System.out.println("Đã replace");
    }
    private void rSButtonIconI8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonIconI8ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Bài tập lớn Dictionary !\nThành viên:\nĐỗ Hữu Toàn\nLê Đình Thiệu", "Thông tin", HEIGHT);
        //formSearch.setVisible(false);
    }//GEN-LAST:event_rSButtonIconI8ActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        // TODO add your handling code here:
        btn_search.setSelected(false);
        btn_edit.setSelected(true);
        formSearch.setVisible(false);
        formEdit.setVisible(true);
        
    }//GEN-LAST:event_btn_editActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        // TODO add your handling code here:
        btn_search.setSelected(true);
        btn_edit.setSelected(false);
        formSearch.setVisible(true);
        formEdit.setVisible(false);
    }//GEN-LAST:event_btn_searchActionPerformed

   
    //Get dữ liệu từ API:
    
    private String sendHttpGETRequest(String url_get) throws IOException {
        URL obj = new URL(url_get);
        HttpURLConnection httpURLConnection = (HttpURLConnection) obj.openConnection();
        httpURLConnection.setRequestMethod("GET");
        httpURLConnection.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = httpURLConnection.getResponseCode();
        System.out.println("GET Response Code :: " + responseCode);
        if (responseCode == HttpURLConnection.HTTP_OK) { // success
            BufferedReader in = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in .readLine()) != null) {
                response.append(inputLine);
            } in .close();

            // print result
            System.out.println(response.toString());
            return response.toString();
        } else {
            System.out.println("GET request not worked");
            String res = "Not found 404";
            return res;
        }
        
        
        /*
        for (int i = 1; i <= 8; i++) {
            System.out.println(httpURLConnection.getHeaderFieldKey(i) + " = " + httpURLConnection.getHeaderField(i));
        }
        */

    }
    
    
    
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                System.out.println(info.getName());
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DictionaryApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DictionaryApplication(0).setVisible(true);
            }
        });
        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSButtonIconI btn_edit;
    private rojerusan.RSButtonIconI btn_search;
    private javax.swing.JPanel panelShow;
    private rojerusan.RSButtonIconI rSButtonIconI8;
    private rojeru_san.RSMTextFullBeanInfo rSMTextFullBeanInfo1;
    private rspanelgradiente.RSPanelGradiente rSPanelGradiente1;
    private rspanelgradiente.RSPanelGradiente rSPanelGradiente2;
    private rojerusan.RSPanelImage rSPanelImage2;
    // End of variables declaration//GEN-END:variables
}
